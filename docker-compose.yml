services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: streamscale_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-streamscale}
      POSTGRES_USER: ${POSTGRES_USER:-streamscale_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-streamscale_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U streamscale_user -d streamscale"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - streamscale_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: streamscale_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - streamscale_network

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: streamscale_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - streamscale_network

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: streamscale_api
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      API_HOST: 0.0.0.0
      API_PORT: 8000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
    command: >
      sh -c "
        echo 'Waiting for services...' &&
        sleep 5 &&
        python -m uvicorn src.pipeline.api:app --host 0.0.0.0 --port 8000 --reload
      "
    networks:
      - streamscale_network
    restart: unless-stopped

  # Scheduler Service
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: streamscale_scheduler
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      SCHEDULER_WORKERS: 4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./scripts:/app/scripts:ro
      - ./logs:/app/logs
    command: python -m src.scheduler.main
    healthcheck:
      test: ["CMD", "python", "/app/scripts/healthcheck_scheduler.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - streamscale_network
    restart: unless-stopped

  # Worker Service (can be scaled)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./scripts:/app/scripts:ro
      - ./logs:/app/logs
    command: python -m src.scheduler.worker_service
    healthcheck:
      test: ["CMD", "python", "/app/scripts/healthcheck_worker.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - streamscale_network
    restart: unless-stopped
    deploy:
      replicas: 2  # Can scale this service

  # Nginx Load Balancer (optional)
  nginx:
    image: nginx:alpine
    container_name: streamscale_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    networks:
      - streamscale_network
    restart: unless-stopped


networks:
  streamscale_network:
    driver: bridge
    name: streamscale_network

volumes:
  postgres_data:
    name: streamscale_postgres_data
  redis_data:
    name: streamscale_redis_data
  rabbitmq_data:
    name: streamscale_rabbitmq_data